Steps
    1)create a sample  as  a prototype  object
    2)Store the  object in registry
    3)On demand of new  object
        1)Get relevant object  from  registry.
        2)clone  the prototype object
        3) change  the  required  attributes in the  object
        4) return  the  object

The Prototype and Registry design patterns are two distinct design patterns used in software engineering to solve specific problems.
 Let's explore each pattern and their usefulness:

Prototype Pattern:

What is it? The Prototype Pattern is a creational design pattern that allows you to create new objects by copying an existing object,
known as the prototype. It is used when the cost of creating an object is more expensive or complex than copying an existing one.

How is it useful?
Efficiency: It can significantly improve performance by reusing existing objects instead of creating new ones from scratch.
Customization: Prototypes can serve as a template for creating new objects, which can be customized or modified as needed.
Reduced Subclassing: Instead of creating subclasses for each variation of an object, the Prototype Pattern allows you to clone
and modify existing objects, reducing the need for complex inheritance hierarchies.


Registry Pattern (also known as the Object Registry or Object Pool Pattern):

What is it? The Registry Pattern is a creational design pattern that maintains a registry (a collection) of objects to avoid the
overhead of creating and destroying objects frequently. It can be used to manage a pool of objects and improve their reuse.

How is it useful?
Resource Management: It helps manage limited resources efficiently by keeping a pool of reusable objects ready for use.
Performance: Reduces the cost of object creation and destruction, which can be beneficial in scenarios where object creation is expensive.
Centralized Control: Provides a centralized way to create, store, and retrieve objects, making it easier to manage and monitor
their usage.
Thread Safety: It can help in managing objects across multiple threads in a thread-safe manner.


The choice between these patterns depends on the specific requirements of your application:

Use the Prototype Pattern when you need to create objects with similar initial state, and you want to minimize
the overhead of object creation by copying existing instances. This is particularly useful when you have a complex
 object that can be customized.

Use the Registry Pattern when you want to manage and reuse a pool of objects efficiently,
especially in resource-intensive scenarios. It's suitable for managing a finite set of objects,
like database connections, network sockets, or reusable graphical elements.




